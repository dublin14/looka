---
import { useTranslations } from "@/lib/utils/languageParser.ts";
import OptimizedImage from "../utilities/OptimizedImage.astro";
const t = await useTranslations(Astro.currentLocale as string);

const { form_action } = Astro.props;
---

<div class="md:pb-10">
  <form
    action={form_action}
    id="mc-embedded-subscribe-form"
    method="post"
    class="relative">
    <label for="mce-EMAIL" class="sr-only">Email</label>
    <input
      required
      type="email"
      name="EMAIL"
      id="mce-EMAIL"
      aria-required="true"
      placeholder={t("common.email_placeholder")}
      class="w-full h-full border-primary/80 focus:ring-4 focus:ring-primary/15 shadow-none outline-0 placeholder:text-white placeholder:opacity-90 py-4 pl-5 bg-white/5"
    />
    <button
      type="submit"
      name="subscribe"
      id="mc-embedded-subscribe"
      class="absolute w-12 h-[calc(100%_-_0.5rem)] bg-primary flex items-center justify-center right-1 top-1 has-icon-moving-animation">
      <span class="sr-only">Subscribe</span>
      <span
        class="items-center justify-center icons-wrapper w-10 h-10 inline-flex">
        <span class="flex items-center justify-center icon icon-before">
          <OptimizedImage
            alt="icon"
            inlineSvg={true}
            class="text-white w-4 h-4"
            src="/images/icons/svg/arrow-top-right.svg"
          />
        </span>
        <span class="flex items-center justify-center icon icon-after">
          <OptimizedImage
            alt="icon"
            inlineSvg={true}
            class="text-white w-4 h-4"
            src="/images/icons/svg/arrow-top-right.svg"
          />
        </span>
      </span>
    </button>
    <div
      id="mce-responses"
      class="clear absolute top-[125%] left-0 w-full text-sm opacity-60">
      <div
        class="message message-error"
        id="mce-error-response"
        style="display: none">
      </div>
      <div
        class="message message-success"
        id="mce-success-response"
        style="display: none">
      </div>
    </div>
    <div style="position: absolute; left: -312.5rem" aria-hidden="true">
      <input
        type="text"
        name="b_436cb8647d746fe81825f1efc_18a007239a"
        tabindex="-1"
        value=""
      />
    </div>
    <input type="hidden" name="EMAILTYPE" id="mce-EMAILTYPE-0" value="html" />
  </form>
  <script>
    // Define the expected response structure
    interface JsonpResponse {
      result: "success" | "error";
      msg: string;
      type?: string;
      webEngagementCookieValue?: string | null;
    }

    // Main function to handle form submission
    document
      .querySelector<HTMLFormElement>("#mc-embedded-subscribe-form")
      ?.addEventListener("submit", async (event) => {
        event.preventDefault(); // Prevent default form submission behavior

        const form = event.target as HTMLFormElement;
        const formData = new FormData(form);
        const actionUrl = form.getAttribute("action"); // Get the form's action URL

        if (!actionUrl) {
          console.error("Form action URL is missing.");
          return;
        }

        // Serialize form data to a query string
        const queryString = new URLSearchParams(formData as any).toString();

        // Select response containers
        const errorContainer = document.querySelector<HTMLElement>(
          "#mce-error-response",
        );
        const successContainer = document.querySelector<HTMLElement>(
          "#mce-success-response",
        );

        if (!errorContainer || !successContainer) {
          console.error("Error or success response containers are missing.");
          return;
        }

        // Clear previous messages
        errorContainer.style.display = "none";
        successContainer.style.display = "none";

        try {
          // Create a dynamic script tag for JSONP
          const script = document.createElement("script");
          const callbackName = `jsonpCallback_${Date.now()}`;

          // Add the JSONP callback function to the global scope
          (window as any)[callbackName] = (data: JsonpResponse) => {
            if (data.result === "success") {
              successContainer.textContent =
                data.msg || "Thank you for subscribing!";
              successContainer.style.display = "block";
            } else {
              errorContainer.textContent =
                data.msg || "An error occurred. Please try again.";
              errorContainer.style.display = "block";
            }

            // Clean up after the callback is executed
            delete (window as any)[callbackName];
            script.remove();
          };

          // Append the JSONP callback and form data to the URL
          script.src = `${actionUrl}&c=${callbackName}&${queryString}`;
          script.onerror = () => {
            errorContainer.textContent =
              "There was an error processing your request. Please try again later.";
            errorContainer.style.display = "block";
            console.error("Error loading JSONP script.");
          };

          // Append the script tag to the document
          document.body.appendChild(script);
        } catch (error) {
          // Handle any unexpected errors
          errorContainer.textContent =
            "There was an error processing your request. Please try again later.";
          errorContainer.style.display = "block";
          console.error("Error:", error);
        }
      });
  </script>
</div>
